<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!--    <properties resource="config.properties"/>-->

    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true -->
            <property name="caseSensitive" value="true"/>
        </plugin>

        <!--配置maven命令-->
        <!--mvn mybatis-generator:generate-->

        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/solo"
                        userId="root"
                        password="root">
        </jdbcConnection>

        <!--        <jdbcConnection driverClass="${jdbc.driverClass}"-->
        <!--                        connectionURL="${jdbc.url}"-->
        <!--                        userId="${jdbc.user}"-->
        <!--                        password="${jdbc.password}">-->
        <!--        </jdbcConnection>-->

        <javaModelGenerator targetPackage="top.chenfu.demo.model"
                            targetProject="src/main/java"/>

        <sqlMapGenerator targetPackage="mapper"
                         targetProject="src/main/resources"/>

        <!--通用Mapper接口的配置，配置javaClientGenerator后会生成对应的接口文件，该接口会自动继承前面配置的通用Mapper接口-->
        <javaClientGenerator targetPackage="top.chenfu.demo.dao"
                             targetProject="src/main/java"
                             type="XMLMAPPER"/>

        <!--        单表生成-->
        <!--        <table tableName="user">-->
        <!--            <generatedKey column="id" sqlStatement="JDBC"/>-->
        <!--        </table>-->

        <!--统一生成，这里使用SQL通配符%来匹配所有表。
        generatedKey意味着所有的表都有一个id自增的主键，
        在生成实体类的时候会根据该配置生成相应的注解-->
        <table tableName="%">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
            <!--补充类似 Oracle 序列的配置方式[官网案例]-->
            <!--这里的 {1} 代表的是对应表的大写形式，{0} 是小写形式。-->
            <!--<generatedKey column="id" sqlStatement="select SEQ_{1}.nextval from dual" identity="false" type="pre"/>-->
            <!--            public class Author {-->
            <!--            @Id-->
            <!--            @GeneratedValue(strategy = GenerationType.IDENTITY,-->
            <!--            generator = "select SEQ_AUTHOR.nextval from dual")-->
            <!--            private Integer id;-->
            <!--            // 省略其他-->
            <!--            }-->

        </table>

    </context>
</generatorConfiguration>